@using ApiClient
@using DataTransfer.Map
@using Markdig
@using Website.Services

@inject ILogger<Script> Logger
@inject IMapApi MapApi
@inject IScriptApi ScriptApi
@inject ICampaignEvents CampaignEvents

@implements IDisposable

@if (_isEditMode)
{
    <div class="edit-view">
        <textarea @bind="_script"></textarea>
        <div class="edit-buttons">
            <button type="button" class="btn btn-outline-danger cancel-button" @onclick="OnCancel">
                <i class="bi bi-x-circle">
                    <span class="button-text">Cancel</span>
                </i>
            </button>
            <button type="button" class="btn btn-success save-button" @onclick="OnSave">
                <i class="bi bi-cloud-download">
                    <span class="button-text">Save</span>
                </i>
            </button>
        </div>
    </div>
}
else
{
    <div class="markdown-view">
        <div>@_scriptHtml</div>
        <button type="button" class="btn btn-outline-primary edit-button" @onclick="OnEdit">
            <i class="bi bi-pencil"></i>
        </button>
    </div>
}

@code {
    [Parameter] public int CampaignId { get; set; }

    private bool _isEditMode = false;
    private string _script = string.Empty;
    private string _scriptBackup = string.Empty;
    private MarkupString _scriptHtml = new(string.Empty);

    public void Dispose()
    {
        CampaignEvents.MapChanged -= OnMapChanged;
    }

    protected override async Task OnInitializedAsync()
    {
        CampaignEvents.MapChanged += OnMapChanged;

        if (await GetActiveMapId() is { } mapId)
        {
            await UpdateScript(mapId);
        }
    }

    private async Task OnCancel()
    {
        _script = _scriptBackup;
        _isEditMode = false;
        await InvokeAsync(StateHasChanged);
    }

    private async Task OnEdit()
    {
        _scriptBackup = _script;
        _isEditMode = true;
        await InvokeAsync(StateHasChanged);
    }

    private async Task OnSave()
    {
        if (await GetActiveMapId() is { } mapId)
        {
            var payload = new ScriptUpdateDto(_script);
            var response = await ScriptApi.Update(mapId, payload);

            if (response.IsSuccess)
            {
                _scriptHtml = new MarkupString(Markdown.ToHtml(_script));
                _isEditMode = false;
                await InvokeAsync(StateHasChanged);
            }
        }
        // ToDo: Errorhandling
    }

    private async Task OnMapChanged(MapChangedEventArgs e)
    {
        await UpdateScript(e.MapId);
    }

    private async Task UpdateScript(int mapId)
    {
        var response = await ScriptApi.GetAsync(mapId);

        response.Match(
            script =>
            {
                _script = script.Text;
                _scriptHtml = new MarkupString(Markdown.ToHtml(script.Text));
            },
            statusCode =>
            {
                // ToDo: Toast
                Logger.LogError("Failed to retrieve the script for map {mapId} ({statusCode})", mapId, statusCode);
            });

        await InvokeAsync(StateHasChanged);
    }

    private async Task<int?> GetActiveMapId()
    {
        var response = await MapApi.GetActiveMapAsync(CampaignId);

        return response.Match(
            activeMap => activeMap.MapId,
            statusCode =>
            {
                // ToDo: Toast
                Logger.LogError("Failed to get the active map ({statusCode})", statusCode);
                return null;
            });
    }

}