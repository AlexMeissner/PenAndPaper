@using DataTransfer.Map
@using Website.Services.API

@inject IMapOverviewApi mapOverviewApi

<div class="backdrop" style="display: @display">
    <div class="input-group mb-3">
        <input type="text" class="form-control" placeholder="Filter...">
        <button type="button" class="btn-close btn-close-white" @onclick="Close"></button>
    </div>
    <div class="card-group">
        <div class="card mb-3 text-center">
            <i class="bi bi-plus-circle create-icon"></i>
            <div class="card-footer card-footer-create btn-group" role="group">
                <button type="button" class="btn btn-outline-success">Erstellen</button>
            </div>
        </div>
        @foreach (var map in mapOverviewItems)
        {
            <div class="card mb-3">
                <img src="data:image/png;base64, @map.ImageBase64" class="card-img-top" alt="" />
                <div class="card-body">
                    <h3 class="card-title">@map.Name</h3>
                </div>
                <div class="card-footer btn-group" role="group">
                    <button type="button" class="btn btn-outline-success">
                        <i class="bi bi-play-fill"></i>
                    </button>
                    <button type="button" class="btn btn-outline-primary">
                        <i class="bi bi-pencil-fill"></i>
                    </button>
                    <button type="button" class="btn btn-outline-danger">
                        <i class="bi bi-trash-fill"></i>
                    </button>
                </div>
            </div>
        }
    </div>
</div>

@code {
    [Parameter]
    public int CampaignId { get; set; }

    private string display = "none";

    private ICollection<MapOverviewItemDto> mapOverviewItems = [];

    protected override async Task OnInitializedAsync()
    {
        var response = await mapOverviewApi.GetAsync(CampaignId);

        response.Match(
            mapOverview =>
            {
                mapOverviewItems = mapOverview.Items;
            },
            errorCode =>
            {
                // ToDo: Log + Toast
                Console.WriteLine(errorCode);
            }
        );
    }

    public void Close()
    {
        display = "none";
        StateHasChanged();
    }

    public void Show()
    {
        display = "block";
        StateHasChanged();
    }
}
