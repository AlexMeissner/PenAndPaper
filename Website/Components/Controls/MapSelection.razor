@using ApiClient
@using DataTransfer.Grid
@using DataTransfer.Map
@using Website.Services

@inject IMapApi MapApi
@inject ILogger<MapSelection> Logger
@inject IJSRuntime JsRuntime
@inject ICampaignEvents CampaignEvents

<div class="backdrop" style="display: @_display">
    <div class="input-group">
        <input type="text" class="form-control" placeholder="Filter...">
        <button type="button" class="btn-close btn-close-white" @onclick="Close"></button>
    </div>
    <div class="row row-cols-1 row-cols-md-4">
        <div class="col">
            <div class="card text-center">
                <i class="bi bi-plus-circle create-icon"></i>
                <div class="card-footer" role="group">
                    <button type="button" class="btn btn-outline-success" @onclick="OnCreate">Erstellen</button>
                    <InputFile id="mapCreationInputFile" OnChange="LoadMapImage"
                               accept="image/png, image/jpeg, image/jpg"
                               style="display: none"></InputFile>
                </div>
            </div>
        </div>

        @foreach (var map in _maps)
        {
            <div class="col">
                <div class="card">
                    <img src="data:image/png;base64, @Convert.ToBase64String(map.Image)" class="card-img-top" alt="" />
                    <div class="card-body">
                        @if (_editMap == map)
                        {
                            <form @onsubmit="OnSubmit" @onkeydown="OnKeyDown" @onblur="OnBlur">
                                <input type="text" class="form-control" @bind="_editMapName" />
                            </form>
                        }
                        else
                        {
                            <h3 class="card-title" @onclick="() => OnEdit(map)">@map.Name</h3>
                        }
                    </div>
                    <div class="card-footer btn-group" role="group">
                        <button type="button" class="btn btn-outline-success" @onclick="async () => await OnPlay(map)">
                            <i class="bi bi-play-fill"></i>
                        </button>
                        <button type="button" class="btn btn-outline-danger" @onclick="async () => await OnDelete(map)">
                            <i class="bi bi-trash-fill"></i>
                        </button>
                    </div>
                </div>
            </div>
        }
    </div>
</div>

@code {
    [Parameter] public int CampaignId { get; set; }

    private string _display = "none";

    private string _editMapName = "";
    private MapsDto? _editMap = null;
    private IEnumerable<MapsDto> _maps = [];

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await LoadItems();
        }
    }

    public async Task Toggle()
    {
        _display = _display == "none" ? "block" : "none";
        await InvokeAsync(StateHasChanged);
    }

    private async Task Close()
    {
        _display = "none";
        await InvokeAsync(StateHasChanged);
    }

    private async Task LoadItems()
    {
        var response = await MapApi.GetAllAsync(CampaignId);

        _maps = response.Match<IEnumerable<MapsDto>>(
            maps => maps,
            statusCode =>
            {
                // ToDo: Log + Toast
                return [];
            }
        );

        await InvokeAsync(StateHasChanged);
    }

    private async Task OnCreate()
    {
        await JsRuntime.InvokeVoidAsync("triggerClick", "mapCreationInputFile");
    }

    private async Task LoadMapImage(InputFileChangeEventArgs e)
    {
        var file = e.File;

        await using var stream = file.OpenReadStream(maxAllowedSize: file.Size);

        var imageBuffer = new byte[file.Size];
        var totalBytesRead = 0;

        while (totalBytesRead < file.Size)
        {
            var bytesRead = await stream.ReadAsync(imageBuffer, totalBytesRead, (int)(file.Size - totalBytesRead));
            totalBytesRead += bytesRead;
            if (bytesRead == 0) break;
        }

        var grid = new GridDto(false, 10);
        var payload = new MapCreationDto("Neue Karte", imageBuffer, grid);

        var response = await MapApi.CreateAsync(CampaignId, payload);

        if (response.Match(_ => true, _ => false))
        {
            await LoadItems();
        }
    }

    private async Task OnPlay(MapsDto map)
    {
        var payload = new ActiveMapUpdateDto(map.Id);
        var response = await MapApi.SetActiveMapAsync(CampaignId, payload);

        if (!response.IsSuccess)
        {
            // ToDo: Log + Toast
            Console.WriteLine(response.StatusCode);
        }

        await Close();
    }

    private void OnEdit(MapsDto map)
    {
        _editMapName = map.Name;
        _editMap = map;
    }

    private void OnKeyDown(KeyboardEventArgs e)
    {
        if (e.Key.Equals("Escape", StringComparison.OrdinalIgnoreCase))
        {
            _editMap = null;
        }
    }

    private void OnBlur()
    {
        _editMap = null;
    }

    private async Task OnSubmit()
    {
        if (_editMap is null) return;

        var payload = new NameUpdateDto(_editMapName);
        var response = await MapApi.UpdateNameAsync(_editMap.Id, payload);

        if (response.IsSuccess)
        {
            await LoadItems();
        }

        _editMap = null;
    }

    private async Task OnDelete(MapsDto map)
    {
        var response = await MapApi.RemoveAsync(map.Id);

        if (response.IsSuccess)
        {
            await LoadItems();
        }
    }

}