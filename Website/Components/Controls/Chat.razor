@using DataTransfer.Chat
@using Website.Services
@using Website.Services.API

@rendermode InteractiveServer

@inject IChatApi ChatApi
@inject IIdentityProvider IdentityProvider
@inject ICampaignEvents CampaignEvents

@implements IDisposable

<div class="chat-container">
    <div class="chat-messages">
        @foreach (var chatMessage in _chatMessages)
        {
            <div class="chat-message">
                <div class="chat-message-container">
                    @if (!IsMe(chatMessage.UserId))
                    {
                        <img class="chat-message-image" alt="" title="@chatMessage.Sender" src="@chatMessage.Image"/>
                    }
                    <div class="@GetTextStyleClasses(chatMessage)">@chatMessage.Text</div>
                </div>
                <div class="chat-message-timestamp-container">
                    <div class="@GetTimestampStyleClasses(chatMessage)">@chatMessage.Timestamp.ToString("HH:mm")</div>
                </div>
            </div>
        }
    </div>
    <div class="chat-input">
        <div class="input-group mb-3">
            <div class="input-group-prepend dropdown">
                <button class="btn btn-secondary dropdown-toggle" type="button" data-bs-toggle="dropdown"
                        aria-expanded="false">
                    @_target.Name
                </button>
                <ul class="dropdown-menu">
                    @foreach (var chatUser in _chatUsers)
                    {
                        <li class="dropdown-item"
                            @onclick="async () => await OnSelectTarget(chatUser)">@chatUser.Name</li>
                    }
                </ul>
            </div>
            <input type="text" class="form-control" placeholder="Nachricht an @_target.Name"
                   @bind-value="_inputText"
                   @bind-value:event="oninput"
                   @onkeydown="OnKeyDown">
        </div>
    </div>
</div>


@code {
    [Parameter] public int CampaignId { get; set; }

    private int _userId;
    private string _inputText = string.Empty;

    private readonly List<ChatMessageEventArgs> _chatMessages = [];

    private IEnumerable<ChatUser> _chatUsers = [];
    private ChatUser _target = new ChatUser(0, "Alle");

    public void Dispose()
    {
        CampaignEvents.ChatMessageReceived -= OnReceivedChatMessage;
    }

    protected override async Task OnInitializedAsync()
    {
        var me = await IdentityProvider.GetUserAsync();
        _userId = me.Id;

        var response = await ChatApi.GetAsync(CampaignId);

        _chatUsers = response.Match(
            chatUsers => chatUsers.Users,
            statusCode => []);

        _target = _chatUsers.First();

        CampaignEvents.ChatMessageReceived += OnReceivedChatMessage;
    }

    private async Task OnReceivedChatMessage(ChatMessageEventArgs e)
    {
        _chatMessages.Add(e);
        await InvokeAsync(StateHasChanged);
    }

    private bool IsMe(int userId) => _userId == userId;

    private string GetTextStyleClasses(ChatMessageEventArgs chatMessageEventArgs)
    {
        var style = "chat-message-text";

        style += chatMessageEventArgs.Type switch
        {
            ChatMessageType.DiceRoll => IsMe(chatMessageEventArgs.UserId) ? " chat-message-dice-roll-sent" : " chat-message-dice-roll-received",
            ChatMessageType.Message => IsMe(chatMessageEventArgs.UserId) ? " chat-message-sent" : " chat-message-received",
            _ => throw new Exception("Unhandled chat message type")
        };

        if (chatMessageEventArgs.IsPrivate)
        {
            style += " chat-message-private";
        }

        return style;
    }

    private string GetTimestampStyleClasses(ChatMessageEventArgs chatMessageEventArgs)
    {
        var style = "chat-message-timestamp";
        style += IsMe(chatMessageEventArgs.UserId) ? " chat-message-timestamp-sent" : " chat-message-timestamp-received";
        return style;
    }

    private async Task OnKeyDown(KeyboardEventArgs e)
    {
        if (_inputText.StartsWith("@"))
        {
            var target = _inputText.Substring(1, _inputText.Length - 1);

            var chatUser = _chatUsers.FirstOrDefault(character =>
                target.StartsWith(character.Name, StringComparison.OrdinalIgnoreCase));

            if (chatUser is not null)
            {
                _target = chatUser;
                _inputText = "";
                await InvokeAsync(StateHasChanged);
                return;
            }
        }

        if (e.Code is "Enter" or "NumpadEnter")
        {
            int? receiverId = _target.UserId == 0 ? null : _target.UserId;
            var payload = new ChatMessageDto(CampaignId, _userId, receiverId, _inputText);
            await ChatApi.PostAsync(payload);
            _inputText = "";
            await InvokeAsync(StateHasChanged);
        }
    }

    private async Task OnSelectTarget(ChatUser character)
    {
        _target = character;
        await InvokeAsync(StateHasChanged);
    }

}