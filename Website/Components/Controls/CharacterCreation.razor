@using ApiClient
@using DataTransfer.Character

@inject IJSRuntime JsRuntime
@inject ICharacterApi CharacterApi

<div>
    <input type="image" class="character-image" alt="Bild auswÃ¤hlen"
           src="data:image/png;base64,@Convert.ToBase64String(_image)" @onclick="OnLoadImage"/>
    <InputFile id="characterCreationInputFile" OnChange="LoadCharacterImage" accept="image/png, image/jpeg, image/jpg"
               style="display: none"></InputFile>

    <div class="input-group mb-3">
        <span class="input-group-text">Name</span>
        <input type="text" class="form-control" @bind="Name">
    </div>

    <button type="button" class="btn btn-outline-success" @onclick="OnCreate">Erstellen</button>
</div>

@code {
    [Parameter] public int CampaignId { get; set; }
    [Parameter] public EventCallback<CharacterCreationDto> OnCreated { get; set; }

    private string Name { get; set; } = "";
    private byte[] _image = [];

    // ToDo: This is a really dirty fix.
    // When LoadCharacterImage is called 'this' is a different instance in comparison to when OnLoadImage is called.
    private static CharacterCreation? _instance;

    private async Task OnCreate()
    {
        // ToDo: Add user feedback
        if (_image.Length == 0) return;

        var character = new CharacterCreationDto(Name, _image);

        await CharacterApi.CreateAsync(CampaignId, character);
        await OnCreated.InvokeAsync(character);
    }

    private async Task OnLoadImage()
    {
        _instance = this;
        await JsRuntime.InvokeVoidAsync("triggerClick", "characterCreationInputFile");
    }

    private async Task LoadCharacterImage(InputFileChangeEventArgs e)
    {
        var file = e.File;

        await using var stream = file.OpenReadStream(maxAllowedSize: file.Size);

        _image = new byte[file.Size];
        var totalBytesRead = 0;

        while (totalBytesRead < file.Size)
        {
            var bytesRead = await stream.ReadAsync(_image, totalBytesRead, (int)(file.Size - totalBytesRead));
            totalBytesRead += bytesRead;
            if (bytesRead == 0) break;
        }

        if (_instance is not null)
        {
            _instance._image = _image;
            _instance.StateHasChanged();
            _instance = null;
        }
    }

}