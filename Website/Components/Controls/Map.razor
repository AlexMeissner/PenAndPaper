@using Website.Services
@using Website.Services.Graphics

@inject RenderContext renderContext

<canvas id="@CANVAS_ID" class="render-context" />

<script>
    const canvas = document.getElementById("renderCanvas");
    canvas.width = canvas.clientWidth;
    canvas.height = canvas.clientHeight;

    window.addEventListener("resize", () => {
        canvas.width = canvas.clientWidth;
        canvas.height = canvas.clientHeight;
    });
</script>

@code {
    private static readonly string CANVAS_ID = "renderCanvas";

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await renderContext.Initialize(CANVAS_ID);

            await Test();
        }
    }

    private async Task Test()
    {
        try
        {
            var width = 1.0f; // 800.0f
            var height = 1.0f; // 600.0f
            float[] vertices = [0.0f, height, 0.0f, 0.0f, width, 0.0f, width, height];
            var quad = await renderContext.CreateTexturedQuad();
            await quad.SetVertices(vertices);

            var vertexSource = await ResourceReader.GetAsync("Map.vert");
            var fragmentSource = await ResourceReader.GetAsync("Map.frag");

            var shaderProgram = await renderContext.CreateShaderProgram();
            var hasSucceeded = await shaderProgram.Compile(vertexSource, fragmentSource);

            if (!hasSucceeded)
            {
                Console.WriteLine("Alarm!");
            }

            await quad.SetShaderProgram(shaderProgram);

            await renderContext.SetMap(quad);
        }
        catch (Exception exception)
        {
            Console.WriteLine(exception.ToString());
        }
    }
}
