@using DataTransfer.Map
@using Website.Converter
@using Website.Services
@using Website.Services.API
@using Website.Services.Graphics

@inject IMapApi MapApi
@inject IActiveMapApi ActiveMapApi
@inject RenderContext RenderContext
@inject ICampaignEvents CampaignEvents
@inject ILogger<Map> Logger

@implements IDisposable

<canvas id="@CANVAS_ID" class="render-context"/>

<script>
    const canvas = document.getElementById("renderCanvas");
    canvas.width = canvas.clientWidth;
    canvas.height = canvas.clientHeight;

    window.addEventListener("resize", () => {
        canvas.width = canvas.clientWidth;
        canvas.height = canvas.clientHeight;
    });
</script>

@code {
    [Parameter] public int CampaignId { get; set; }

    private TexturedQuad? _texturedQuad;
    private ShaderProgram? _shaderProgram;

    private static readonly string CANVAS_ID = "renderCanvas";

    public void Dispose()
    {
        CampaignEvents.MapChanged -= OnMapChanged;
    }

    protected override void OnInitialized()
    {
        CampaignEvents.MapChanged += OnMapChanged;
    }

    private async Task OnMapChanged(MapChangedEventArgs e)
    {
        await LoadActiveMap();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await RenderContext.Initialize(CANVAS_ID);
            await LoadShaderProgram();
            await LoadActiveMap();
        }
    }

    private async Task LoadShaderProgram()
    {
        var vertexSource = await ResourceReader.GetAsync("Map.vert");
        var fragmentSource = await ResourceReader.GetAsync("Map.frag");

        _shaderProgram = await RenderContext.CreateShaderProgram();

        var hasSucceeded = await _shaderProgram.Compile(vertexSource, fragmentSource);

        if (!hasSucceeded)
        {
            Logger.LogError("Failed to compile map shader");
        }
    }

    private async Task LoadActiveMap()
    {
        var mapId = await GetActiveMapId();

        if (mapId is null) return;

        var map = await GetMapData((int)mapId);

        if (map is null) return;

        var dimensions = ByteArrayToImageSizeConverter.Convert(map.ImageData);

        float[] vertices =
        [
            0.0f, 0.0f,
            dimensions.Width, 0.0f,
            0.0f, -dimensions.Height,
            dimensions.Width, -dimensions.Height
        ];

        if (_texturedQuad is null)
        {
            _texturedQuad = await RenderContext.CreateTexturedQuad();
            await _texturedQuad.SetVertices(vertices);
        }
        else
        {
            await _texturedQuad.UpdateVertices(vertices);
        }

        if (map.ImageData.Length > 0)
        {
            await _texturedQuad.SetTexture(map.ImageData);
        }

        if (_shaderProgram is not null)
        {
            await _texturedQuad.SetShaderProgram(_shaderProgram);
        }

        await RenderContext.SetMap(_texturedQuad);
    }

    private async Task<int?> GetActiveMapId()
    {
        var response = await ActiveMapApi.GetAsync(CampaignId);

        return response.Match(
            activeMap => activeMap.MapId,
            statusCode =>
            {
                Logger.LogError("Failed to get the active map ({statusCode})", statusCode);
                return null;
            });
    }

    private async Task<MapDto?> GetMapData(int mapId)
    {
        var response = await MapApi.GetAsync(mapId);

        return response.Match<MapDto?>(
            map => map,
            statusCode =>
            {
                Logger.LogError("Failed to get map data ({statusCode})", statusCode);
                return null;
            });
    }

}