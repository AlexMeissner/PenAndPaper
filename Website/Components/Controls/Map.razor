@using ApiClient
@using DataTransfer.Character
@using DataTransfer.Grid
@using DataTransfer.Map
@using DataTransfer.Monster
@using DataTransfer.Mouse
@using DataTransfer.Token
@using DataTransfer.Types
@using Website.Converter
@using Website.Services
@using Website.Services.Graphics

@inject IMapApi MapApi
@inject IMouseApi MouseApi
@inject ITokenApi TokenApi
@inject RenderContext RenderContext
@inject ICampaignEvents CampaignEvents
@inject IDragAndDrop DragAndDrop
@inject ILogger<Map> Logger

@implements IDisposable

<canvas id="@CanvasId"
tabindex="0"
class="render-context"
@onkeydown="OnKeyDown"
@onmousemove="OnMouseMove"
@onmousedown="OnMouseButtonChanged"
@onmouseup="OnMouseButtonChanged"
@onmouseleave="OnMouseLeave"
@ondrop="OnDrop"
ondragover="event.preventDefault()">
</canvas>

<div class="offcanvas offcanvas-end" tabindex="-1" id="offcanvasRight" aria-labelledby="offcanvasRightLabel">
    <div class="offcanvas-header">
        <h5 id="offcanvasRightLabel">Grid Einstellungen</h5>
        <button type="button" class="btn-close text-reset" data-bs-dismiss="offcanvas" aria-label="Close"></button>
    </div>
    <div class="offcanvas-body">
        <div class="input-group mb-3">
            <span class="input-group-text">Aktiv</span>
            <div class="input-group-text">
                <input class="form-check-input mt-0" type="checkbox" checked="@GridIsActive"
                @onchange="OnGridActivityChanged">
            </div>
        </div>
        <!--
        <div class="input-group mb-3">
        <span class="input-group-text">Farbe</span>
        <input type="color" class="form-control" value="#000000"/>
        </div>
        -->
        <div class="input-group mb-3">
            <span class="input-group-text">Größe</span>
            <input type="range" class="form-range form-control" min="0" max="100" step="1.0" value="@GridSize"
            @onchange="OnGridSizeChanged">
            <input type="number" class="form-control" value="@GridSize" @onchange="OnGridSizeChanged">
        </div>
    </div>
</div>

<script>
    const canvas = document.getElementById("renderCanvas");
    canvas.width = canvas.clientWidth;
    canvas.height = canvas.clientHeight;

    window.addEventListener("resize", () => {
    canvas.width = canvas.clientWidth;
    canvas.height = canvas.clientHeight;
    });
</script>

@code {
    [Parameter] public int CampaignId { get; set; }
    [Parameter] public bool IsGameMaster { get; set; }

    private int GridSize { get; set; }
    private bool GridIsActive { get; set; }

    private int? _mapId;
    private int _userId;
    private Vector2D _selectedTokenPosition = new(0, 0);
    private Token? _selectedToken;
    private TexturedQuad? _texturedQuad;
    private MouseIndicator? _mouseIndicator;
    private ShaderProgram? _mapShaderProgram;
    private ShaderProgram? _tokenShaderProgram;
    private ShaderProgram? _mouseShaderProgram;

    private readonly List<Token> _tokens = [];

    const long LeftMouseButton = 1;
    private static readonly string CanvasId = "renderCanvas";

    public void Dispose()
    {
        CampaignEvents.GridChanged -= OnGridChanged;
        CampaignEvents.MapChanged -= OnMapChanged;
        CampaignEvents.MouseMoved -= OnMouseMoved;
        CampaignEvents.TokenAdded -= OnTokenAdded;
        CampaignEvents.TokenMoved -= OnTokenMoved;
    }

    protected override void OnInitialized()
    {
        CampaignEvents.GridChanged += OnGridChanged;
        CampaignEvents.MapChanged += OnMapChanged;
        CampaignEvents.MouseMoved += OnMouseMoved;
        CampaignEvents.TokenAdded += OnTokenAdded;
        CampaignEvents.TokenMoved += OnTokenMoved;
    }

    private async Task OnGridChanged(GridChangedEventArgs e)
    {
        float[] color = [0.0f, 0.0f, 0.0f, 1.0f];
        await RenderContext.UpdateGrid(e.IsActive, e.Size, color);
    }

    private async Task OnMapChanged(MapChangedEventArgs e)
    {
        await LoadActiveMap(e.MapId);
        await LoadTokens(e.MapId);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await RenderContext.Initialize(CanvasId);
            await LoadMapShaderProgram();
            await LoadTokenShaderProgram();
            await LoadMouseShaderProgram();

            _mouseIndicator = await CreateMouseIndicator();
            await RenderContext.AddMouseIndicator(_mouseIndicator);

            var response = await MapApi.GetActiveMapAsync(CampaignId);

            _mapId = response.Match(
                activeMap => activeMap.MapId,
                statusCode =>
                {
                    // ToDo: Toast
                    Logger.LogError("Failed to get the active map ({statusCode})", statusCode);
                    return null;
                });

            if (_mapId is { } mapId)
            {
                await LoadActiveMap(mapId);
                await LoadTokens(mapId);
            }
        }
    }

    private async Task LoadMapShaderProgram()
    {
        var vertexSource = await ResourceReader.GetAsync("Map.vert");
        var fragmentSource = await ResourceReader.GetAsync("Map.frag");

        _mapShaderProgram = await RenderContext.CreateShaderProgram();

        var hasSucceeded = await _mapShaderProgram.Compile(vertexSource, fragmentSource);

        if (!hasSucceeded)
        {
            Logger.LogError("Failed to compile map shader");
        }

        var cameraBuffer = await RenderContext.GetCamera();
        await _mapShaderProgram.AddUniformBuffer(cameraBuffer);

        var gridBuffer = await RenderContext.GetGrid();
        await _mapShaderProgram.AddUniformBuffer(gridBuffer);
    }

    private async Task LoadTokenShaderProgram()
    {
        var vertexSource = await ResourceReader.GetAsync("Token.vert");
        var fragmentSource = await ResourceReader.GetAsync("Token.frag");

        _tokenShaderProgram = await RenderContext.CreateShaderProgram();

        var hasSucceeded = await _tokenShaderProgram.Compile(vertexSource, fragmentSource);

        if (!hasSucceeded)
        {
            Logger.LogError("Failed to compile map shader");
        }

        var cameraBuffer = await RenderContext.GetCamera();
        await _tokenShaderProgram.AddUniformBuffer(cameraBuffer);

        var gridBuffer = await RenderContext.GetGrid();
        await _tokenShaderProgram.AddUniformBuffer(gridBuffer);
    }

    private async Task LoadMouseShaderProgram()
    {
        var vertexSource = await ResourceReader.GetAsync("Mouse.vert");
        var fragmentSource = await ResourceReader.GetAsync("Mouse.frag");

        _mouseShaderProgram = await RenderContext.CreateShaderProgram();

        var hasSucceeded = await _mouseShaderProgram.Compile(vertexSource, fragmentSource);

        if (!hasSucceeded)
        {
            Logger.LogError("Failed to compile map shader");
        }

        var cameraBuffer = await RenderContext.GetCamera();
        await _mouseShaderProgram.AddUniformBuffer(cameraBuffer);
    }

    private async Task LoadActiveMap(int mapId)
    {
        var map = await GetMapData(mapId);

        if (map is null) return;

        _mapId = mapId;

        var dimensions = ByteArrayToImageSizeConverter.Convert(map.Image);

        float[] vertices =
        [
            0.0f, 0.0f,
            dimensions.Width, 0.0f,
            0.0f, -dimensions.Height,
            dimensions.Width, -dimensions.Height
        ];

        if (_texturedQuad is null)
        {
            _texturedQuad = await RenderContext.CreateTexturedQuad();
            await _texturedQuad.SetVertices(vertices);
        }
        else
        {
            await _texturedQuad.UpdateVertices(vertices);
        }

        if (map.Image.Length > 0)
        {
            await _texturedQuad.SetTexture(map.Image);
        }

        if (_mapShaderProgram is not null)
        {
            await _texturedQuad.SetShaderProgram(_mapShaderProgram);
        }

        await RenderContext.SetMap(_texturedQuad);

        float[] color = [0.0f, 0.0f, 0.0f, 1.0f];
        await RenderContext.UpdateGrid(map.Grid.IsActive, map.Grid.Size, color);

        GridIsActive = map.Grid.IsActive;
        GridSize = map.Grid.Size;

        await InvokeAsync(StateHasChanged);
    }

    private async Task<MouseIndicator> CreateMouseIndicator()
    {
        const float halfSize = 25.0f;
        float[] vertices =
        [
            -halfSize, halfSize,
            halfSize, halfSize,
            -halfSize, -halfSize,
            halfSize, -halfSize
        ];

        var mouseIndicator = await RenderContext.CreateMouseIndicator();
        await mouseIndicator.SetVertices(vertices);

        if (_mouseShaderProgram is not null)
        {
            await mouseIndicator.SetShaderProgram(_mouseShaderProgram);
        }

        return mouseIndicator;
    }

    private async Task LoadTokens(int mapId)
    {
        var response = await TokenApi.GetAllAsync(mapId);

        var tokens = response.Match<IEnumerable<TokensDto>>(
            tokens => tokens,
            statusCode =>
            {
                // ToDo: Toast
                Logger.LogError("Failed to get the tokens for map {mapId} ({statusCode})", mapId, statusCode);
                return [];
            });

        await RenderContext.ClearTokens();
        _tokens.Clear();

        foreach (var tokenItem in tokens)
        {
            await CreateToken(tokenItem.TokenId, tokenItem.UserId, tokenItem.Image, tokenItem.X, tokenItem.Y);
        }
    }

    private async Task CreateToken(int tokenId, int userId, byte[] image, int x, int y)
    {
        float[] vertices =
        [
            0.0f, 0.0f,
            1.0f, 0.0f,
            0.0f, -1.0f,
            1.0f, -1.0f
        ];

        var token = await RenderContext.CreateToken();
        token.Id = tokenId;
        token.UserId = userId;

        await token.SetVertices(vertices);
        await token.SetTexture(image);

        if (_tokenShaderProgram is not null)
        {
            await token.SetShaderProgram(_tokenShaderProgram);
        }

        await token.SetUniform("x", x);
        await token.SetUniform("y", y);

        await RenderContext.AddToken(token);
        _tokens.Add(token);
    }

    private async Task OnMouseButtonChanged(MouseEventArgs e)
    {
        _selectedToken = null;

        if (e.Buttons == LeftMouseButton)
        {
            foreach (var token in _tokens)
            {
                if (await token.GetUniform("isMouseOver") == 1.0f)
                {
                    var position = new Vector2D(e.ClientX, e.ClientY);
                    var transformedPosition = await RenderContext.TransformPosition(position);
                    _selectedTokenPosition = GetGridSnapPosition(transformedPosition);
                    _selectedToken = token;
                    break;
                }
            }
        }
    }

    private void OnMouseLeave(MouseEventArgs e)
    {
        _selectedToken = null;
    }

    private async Task OnMouseMove(MouseEventArgs e)
    {
        if (e.Buttons == LeftMouseButton)
        {
            var position = new Vector2D(e.ClientX, e.ClientY);
            var transformedPosition = await RenderContext.TransformPosition(position);

            if (_selectedToken is null)
            {
                var payload = new MouseIndicatorDto((int)transformedPosition.X, (int)transformedPosition.Y);
                await MouseApi.SetIndicatorAsync(CampaignId, payload);
            }
            else
            {
                var snapPosition = GetGridSnapPosition(transformedPosition);

                var hasPermission = IsGameMaster || _userId == _selectedToken.UserId;
                var hasPositionChanged = snapPosition.X != _selectedTokenPosition.X || snapPosition.Y != _selectedTokenPosition.Y;

                if (hasPermission && hasPositionChanged)
                {
                    var payload = new TokenUpdateDto((int)snapPosition.X, (int)snapPosition.Y);
                    await TokenApi.MoveAsync(_selectedToken.Id, payload);
                    _selectedTokenPosition = snapPosition;
                }
            }
        }
    }

    private async Task OnMouseMoved(MouseMoveEventArgs e)
    {
        await _mouseIndicator!.SetPosition(e.Position);
    }

    private async Task OnTokenMoved(TokenMovedEventArgs e)
    {
        if (_tokens.Find(x => x.Id == e.TokenId) is { } token)
        {
            await token.SetUniform("x", e.X);
            await token.SetUniform("y", e.Y);
        }
    }

    private async Task OnTokenAdded(TokenAddedEventArgs e)
    {
        await CreateToken(e.Id, e.UserId, e.Image, e.X, e.Y);
    }

    private Vector2D GetGridSnapPosition(Vector2D position)
    {
        var x = (int)position.X / GridSize * GridSize;
        var y = (int)position.Y / GridSize * GridSize;
        return new Vector2D(x, y);
    }

    private async Task<MapDto?> GetMapData(int mapId)
    {
        var response = await MapApi.GetAsync(mapId);

        return response.Match<MapDto?>(
            map => map,
            statusCode =>
            {
                // ToDo: Toast
                Logger.LogError("Failed to get map data ({statusCode})", statusCode);
                return null;
            });
    }

    private async Task OnDrop(DragEventArgs e)
    {
        if (_mapId is { } mapId)
        {
            var clientPosition = new Vector2D(e.ClientX, e.ClientY);
            var transformedPosition = await RenderContext.TransformPosition(clientPosition);
            var snapPosition = GetGridSnapPosition(transformedPosition);

            var payload = new TokenCreationDto((int)snapPosition.X, (int)snapPosition.Y);

            switch (DragAndDrop.Data)
            {
                case MonstersDto monster:
                    await TokenApi.CreateMonster(mapId, monster.Id, payload);
                    break;

                case CharactersDto character:
                    await TokenApi.CreateCharacter(mapId, character.Id, payload);
                    break;
            }
        }
        else
        {
            // ToDo: Error Handling
            return;
        }
    }

    private async Task OnKeyDown(KeyboardEventArgs e)
    {
        if (e.Key.Equals("Delete", StringComparison.OrdinalIgnoreCase) && _selectedToken is not null)
        {
            await TokenApi.RemoveAsync(_selectedToken.Id);
            _selectedToken = null;
        }
    }

    private async Task OnGridActivityChanged(ChangeEventArgs e)
    {
        if (_mapId is { } mapId && e.Value is bool isActive)
        {
            GridIsActive = isActive;

            var payload = new GridUpdateDto(GridIsActive, GridSize);
            await MapApi.UpdateGrid(mapId, payload);
        }
    }

    private async Task OnGridSizeChanged(ChangeEventArgs e)
    {
        if (_mapId is { } mapId && e.Value is { } value && value.ToString() is { } valueText)
        {
            GridSize = int.Parse(valueText);

            var payload = new GridUpdateDto(GridIsActive, GridSize);
            await MapApi.UpdateGrid(mapId, payload);
        }
    }

}