@using Website.Services
@using Website.Services.API
@using Website.Services.Graphics

@inject IMapApi mapApi
@inject IActiveMapApi activeMapApi
@inject RenderContext renderContext

<canvas id="@CANVAS_ID" class="render-context" />

<script>
    const canvas = document.getElementById("renderCanvas");
    canvas.width = canvas.clientWidth;
    canvas.height = canvas.clientHeight;

    window.addEventListener("resize", () => {
        canvas.width = canvas.clientWidth;
        canvas.height = canvas.clientHeight;
    });
</script>

@code {
    [Parameter]
    public int CampaignId { get; set; }

    private static readonly string CANVAS_ID = "renderCanvas";

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await renderContext.Initialize(CANVAS_ID);

            await Test();
        }
    }

    private async Task Test()
    {
        try
        {
            var width = 1.0f; // 800.0f
            var height = 1.0f; // 600.0f
            float[] vertices = [0.0f, height, 0.0f, 0.0f, width, 0.0f, width, height];
            var quad = await renderContext.CreateTexturedQuad();
            await quad.SetVertices(vertices);

            var vertexSource = await ResourceReader.GetAsync("Map.vert");
            var fragmentSource = await ResourceReader.GetAsync("Map.frag");

            var shaderProgram = await renderContext.CreateShaderProgram();
            var hasSucceeded = await shaderProgram.Compile(vertexSource, fragmentSource);

            if (!hasSucceeded)
            {
                Console.WriteLine("Alarm!");
            }

            var activeMapResult = await activeMapApi.GetAsync(CampaignId);
            int? mapId = null;

            activeMapResult.Match(
                map =>
                {
                    mapId = map.MapId;
                },
                errorCode =>
                {
                    Console.WriteLine(errorCode);
                }
            );

            if (mapId is int id)
            {
                var mapResult = await mapApi.GetAsync(id);

                var image = mapResult.Match(
                    map =>
                    {
                        return map.ImageData;
                    },
                    errorCode =>
                    {
                        Console.WriteLine(errorCode);
                        return [];
                    }
                );

                if (image.Length > 0)
                {
                    await quad.SetTexture(image);
                }
            }

            await quad.SetShaderProgram(shaderProgram);

            await renderContext.SetMap(quad);
        }
        catch (Exception exception)
        {
            Console.WriteLine(exception.ToString());
        }
    }
}
