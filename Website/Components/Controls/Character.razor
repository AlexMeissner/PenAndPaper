@using System.Net
@using ApiClient
@using DataTransfer.Character

@inject ICharacterApi CharacterApi
@inject ILogger<Character> Logger

@if (_characters.Any())
{
    @foreach (var character in _characters)
    {
        <div>
            <img class="character-image" alt="" src="data:image/png;base64,@Convert.ToBase64String(character.Image)" />

            <div class="input-group mb-3">
                <span class="input-group-text">Name</span>
                <span class="input-group-text">@character.CharacterName</span>
            </div>

            <div class="input-group mb-3">
                <span class="input-group-text">Spieler</span>
                <span class="input-group-text">@character.PlayerName</span>
            </div>
        </div>
    }
}
else
{
    <CharacterCreation CampaignId="CampaignId" OnCreated="OnCreated"></CharacterCreation>
}

@code {
    [Parameter] public int CampaignId { get; set; }

    private IEnumerable<CharactersDto> _characters = [];

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await Update();
            await InvokeAsync(StateHasChanged);
        }
    }

    private async Task OnCreated(CharacterCreationDto character)
    {
        await Update();
        await InvokeAsync(StateHasChanged);
    }

    private async Task Update()
    {
        var response = await CharacterApi.GetAllFromUserAsync(CampaignId);

        _characters = response.Match<IEnumerable<CharactersDto>>(
            characters => characters,
            statusCode =>
            {
                // ToDo: Toast
                return [];
            }
        );
    }

}