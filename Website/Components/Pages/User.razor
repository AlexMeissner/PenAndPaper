@page "/user"

@using ApiClient
@using DataTransfer.User

@rendermode InteractiveServer

@inject IUserApi UserApi
@inject NavigationManager NavigationManager

<div class="user">
    <div class="user-icon">
        <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 448 512">
            <path fill="white" d="M224 256A128 128 0 1 0 224 0a128 128 0 1 0 0 256zm-45.7 48C79.8 304 0 383.8 0 482.3C0 498.7 13.3 512 29.7 512l388.6 0c16.4 0 29.7-13.3 29.7-29.7C448 383.8 368.2 304 269.7 304l-91.4 0z" />
        </svg>
    </div>

    <table>
        <tr>
            <td>Benutzername</td>
            <td>
                <input class="input-field" type="text" placeholder="Name eingeben" @bind="_username" />
            </td>
        </tr>
        <tr>
            <td>Karten-Indikator</td>
            <td>
                <input class="input-field" type="color" @bind="_color" />
            </td>
        </tr>
    </table>

    <button class="button" type="button" @onclick="OnUpdateUser">Update</button>
</div>

@code {
    private string _color = "#FF0000";
    private string _username = string.Empty;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            var response = await UserApi.GetMyself();

            response.Match(
                properties =>
                {
                    _username = properties.Username;
                    _color = properties.Color;
                },
                statusCode =>
                {
                    Console.WriteLine($"Failed to get user properties {statusCode}");
                    // ToDo: Toast
                }
            );

            await InvokeAsync(StateHasChanged);
        }
    }

    private async Task OnUpdateUser(MouseEventArgs args)
    {
        var userPropeties = new UserPropertiesUpdate(_username, _color);

        var response = await UserApi.UpdateMyself(userPropeties);

        if (response.IsSuccess)
        {
            NavigationManager.NavigateTo("/");
        }
    }
}
