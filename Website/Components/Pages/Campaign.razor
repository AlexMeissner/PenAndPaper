@page "/campaign/{campaignId:int}"
@rendermode InteractiveServer

@using Website.Components.Controls
@using Website.Services.API
@using Website.Services.Graphics

@inject IWebGl webGl
@inject ICampaignOverviewApi campaignOverviewApi
@inject NavigationManager navigationManager

<div class="master-panel">
    <div class="left-panel">
        <Map CampaignId="@CampaignId"/>
        <!--<img src="https://cdn2.inkarnate.com/cdn-cgi/image/width=1800,height=1400/https://inkarnate-api-as-production.s3.amazonaws.com/wxabhd3ztw3qgg5da0k4gq9epzpt" />-->
        <button class="btn btn-overlay btn-dice" @onclick="ToggleDiceRoller">
            <i class="bi bi-dice-6"></i>
        </button>
        <button class="btn btn-overlay btn-map" @onclick="ToggleMapSelection">
            <i class="bi bi-map"></i>
        </button>
        <button class="btn btn-overlay btn-sound">
            <i class="bi bi-music-note-beamed"></i>
        </button>
        <DiceRoller CampaignId="@CampaignId" @ref="diceRoller"/>
        <DiceRollVisualizer/>
        <MapSelection CampaignId="@CampaignId" @ref="mapSelection"/>
    </div>
    <div class="right-panel">
        <!-- https://www.w3schools.com/howto/tryit.asp?filename=tryhow_js_tabs_close -->
        <div class="tab">
            <button class="@GetTabStyle(TabIndex.Script)" @onclick="() => ActiveTab(TabIndex.Script)">Skript</button>
            <button class="@GetTabStyle(TabIndex.Chat)" @onclick="() => ActiveTab(TabIndex.Chat)">Chat</button>
        </div>

        @switch (activeTabIndex)
        {
            case TabIndex.Script:
                <div class="tabcontent">
                    <h3>Script</h3>
                    <p>This is a script.</p>
                </div>
                break;

            case TabIndex.Chat:
                <div class="tabcontent">
                    <h3>Chat</h3>
                    <p>I am a text message.</p>
                </div>
                break;
        }
    </div>
</div>

@code {
    [Parameter] public int CampaignId { get; set; }

    // ToDo: Get correct user id
    private int userId = 1;
    private bool isGamemaster = false;
    private TabIndex activeTabIndex = TabIndex.Script;

    private MapSelection? mapSelection;
    private DiceRoller? diceRoller;

    private enum TabIndex
    {
        Script,
        Chat
    }

    private void ActiveTab(TabIndex tabIndex)
    {
        activeTabIndex = tabIndex;
    }

    private string GetTabStyle(TabIndex tabIndex)
    {
        return tabIndex == activeTabIndex ? "active" : string.Empty;
    }

    private void ToggleDiceRoller()
    {
        diceRoller?.Toggle();
    }

    private async Task ToggleMapSelection()
    {
        if (mapSelection is not null)
        {
            await mapSelection.Toggle();
        }
    }

    protected override async Task OnInitializedAsync()
    {
        var response = await campaignOverviewApi.GetAsync(userId);

        response.Match(
            campaignOverview =>
            {
                // ToDo: Add a better endpoint for that request
                var campaign = campaignOverview.CampaignItems.FirstOrDefault(c => c.Id == CampaignId);
                isGamemaster = campaign is null ? false : campaign.IsGamemaster;
            },
            errorCode =>
            {
                // ToDo: Log + Toast
                Console.WriteLine(errorCode);
            }
        );
    }

}