@page "/campaign/{campaignId:int}"

@rendermode InteractiveServer

@using ApiClient
@using Website.Components.Controls
@using Website.Services
@using Website.Services.Sound

@inject ICampaignEvents CampaignEvents
@inject ICampaignApi CampaignApi
@inject AudioPlayer AudioPlayer

<PageTitle>@_title</PageTitle>

<div class="master-panel">
    <div class="left-panel">
        <Map CampaignId="@CampaignId" IsGameMaster="@_isGameMaster"></Map>
        @if (_isGameMaster)
        {
            <button class="btn btn-overlay btn-map" @onclick="ToggleMapSelection">
                <i class="bi bi-map"></i>
            </button>
            <button class="btn btn-overlay btn-sound" @onclick="ToggleSoundSelection">
                <i class="bi bi-music-note-beamed"></i>
            </button>
            <button class="btn btn-overlay btn-grid" type="button" data-bs-toggle="offcanvas"
                    data-bs-target="#offcanvasRight" aria-controls="offcanvasRight">
                <i class="bi bi-grid-3x3"></i>
            </button>

            <MapSelection CampaignId="@CampaignId" @ref="_mapSelection" />
            <Soundboard CampaignId="@CampaignId" @ref="_soundboard" />
        }

        <button class="btn btn-overlay btn-dice" @onclick="ToggleDiceRoller">
            <i class="bi bi-dice-6"></i>
        </button>

        <DiceRoller CampaignId="@CampaignId" @ref="_diceRoller" />
        <DiceRollVisualizer />
    </div>
    <div class="right-panel">
        <div class="tab">
            <button class="@GetTabStyle(TabIndex.Chat)" @onclick="() => ActiveTab(TabIndex.Chat)">Chat</button>

            @if (_isGameMaster)
            {
                <button class="@GetTabStyle(TabIndex.Script)" @onclick="() => ActiveTab(TabIndex.Script)">
                    Skript
                </button>
                <button class="@GetTabStyle(TabIndex.Characters)" @onclick="() => ActiveTab(TabIndex.Characters)">
                    Charaktere
                </button>
                <button class="@GetTabStyle(TabIndex.Monsters)" @onclick="() => ActiveTab(TabIndex.Monsters)">
                    Monster
                </button>
            }
            else
            {
                <button class="@GetTabStyle(TabIndex.Character)" @onclick="() => ActiveTab(TabIndex.Character)">
                    Charakter
                </button>
            }
        </div>

        <div class="tab-content">
            <div class="@GetContentStyle(TabIndex.Chat)">
                <Chat CampaignId="@CampaignId"></Chat>
            </div>

            <div class="@GetContentStyle(TabIndex.Script)">
                <Script CampaignId="@CampaignId"></Script>
            </div>

            <div class="@GetContentStyle(TabIndex.Character)">
                <Character CampaignId="@CampaignId"></Character>
            </div>

            <div class="@GetContentStyle(TabIndex.Characters)">
                <Characters CampaignId="@CampaignId"></Characters>
            </div>

            <div class="@GetContentStyle(TabIndex.Monsters)">
                <Monsters></Monsters>
            </div>
        </div>
    </div>
</div>

@code {
    [Parameter] public int CampaignId { get; set; }

    private string _title = "Unbekannte Kampagne";
    private bool _isGameMaster;
    private TabIndex _activeTabIndex = TabIndex.Chat;

    private MapSelection? _mapSelection;
    private Soundboard? _soundboard;
    private DiceRoller? _diceRoller;

    private enum TabIndex
    {
        Chat,
        Script,
        Character,
        Characters,
        Monsters
    }

    private void ActiveTab(TabIndex tabIndex)
    {
        _activeTabIndex = tabIndex;
    }

    private string GetTabStyle(TabIndex tabIndex)
    {
        return tabIndex == _activeTabIndex ? "active" : string.Empty;
    }

    private string GetContentStyle(TabIndex tabIndex)
    {
        return tabIndex == _activeTabIndex ? "tab-content-element" : "hidden";
    }

    private void ToggleDiceRoller()
    {
        _diceRoller?.Toggle();
    }

    private async Task ToggleMapSelection()
    {
        if (_mapSelection is not null)
        {
            await _mapSelection.Toggle();
        }
    }

    private async Task ToggleSoundSelection()
    {
        if (_soundboard is not null)
        {
            await _soundboard.Toggle();
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            var response = await CampaignApi.GetAsync(CampaignId);

            response.Match(
                campaign =>
                {
                    _title = campaign.Name;
                    _isGameMaster = campaign.IsGameMaster;
                },
                statusCode =>
                {
                    // ToDo: Log + Toast
                }
            );

            await CampaignEvents.Connect(CampaignId);
        }
    }
}