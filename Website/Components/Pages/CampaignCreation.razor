@page "/campaignCreation"
@page "/campaignCreation/{campaignId:int}"

@rendermode InteractiveServer

@using ApiClient
@using DataTransfer.Campaign;

@inject ICampaignApi CampaignApi
@inject IUserApi UserApi
@inject NavigationManager NavigationManager

<PageTitle>Pen & Paper Kampagnenerstellung</PageTitle>

<div class="background-image">
    <div class="centered-backdrop">
        <div class="input-group top-panels">
            <div class="input-group-prepend">
                <i class="bi bi-person-circle input-group-text icons"></i>
            </div>
            <input type="text" class="form-control" @bind="_campaignName" placeholder="Kampagnenname"
                   aria-label="Username" aria-describedby="basic-addon1">
        </div>
        <div class="player-selection">
            <div class="left-panel">
                <h4 class="headings">Spielerliste</h4>
                <ul class="list-group">
                    @foreach (var user in _uninvitedUsers)
                    {
                        <button type="button" class="list-group-item"
                                @onclick="() => OnAddPlayer(user)">@user.Name</button>
                    }
                </ul>
            </div>
            <div class="right-panel">
                <h4 class="headings">Spieler in Kampagne</h4>
                <ul class="list-group">
                    @foreach (var user in _players)
                    {
                        <button class="list-group-item" @onclick="() => OnRemovePlayer(user)">@user.Name</button>
                    }
                </ul>
            </div>
        </div>
        <div class="bottom-panel">
            <button type="button" class="btn btn-outline-warning buttons" @onclick="OnCancel">Abbrechen</button>
            <button type="button" class="btn btn-outline-success buttons" @onclick="OnOk">@ButtonText</button>
        </div>
    </div>
</div>

@code {
    [Parameter] public int? CampaignId { get; set; }

    private string ButtonText => CampaignId is null ? "Erstellen" : "Aktualisieren";

    private string _campaignName = string.Empty;
    private ICollection<CampaignUser> _players = [];
    private ICollection<CampaignUser> _uninvitedUsers = [];

    protected override async Task OnInitializedAsync()
    {
        if (CampaignId is { } campaignId)
        {
            var response = await CampaignApi.GetAsync(campaignId);

            response.Match(
                campaign =>
                {
                    _campaignName = campaign.Name;
                    _players = campaign.Players.ToList();
                    _uninvitedUsers = campaign.UninvitedUsers.ToList();
                },
                statusCode =>
                {
                    // ToDo: Log + Toast
                }
            );
        }
        else
        {
            var response = await UserApi.GetAllAsync();

            response.Match(
                users =>
                {
                    _campaignName = string.Empty;
                    _players = [];
                    _uninvitedUsers = users.ToList();
                },
                statusCode =>
                {
                    // ToDo: Log + Toast
                }
            );
        }
    }

    private void OnAddPlayer(CampaignUser user)
    {
        _uninvitedUsers.Remove(user);
        _players.Add(user);
    }

    private void OnRemovePlayer(CampaignUser user)
    {
        _players.Remove(user);
        _uninvitedUsers.Add(user);
    }

    private void OnCancel()
    {
        NavigationManager.NavigateTo("/");
    }

    private async Task OnOk()
    {
        var players = _players.Select(p => p.Id);

        if (CampaignId is { } campaignId)
        {
            await ModifyCampaign(campaignId, players);
        }
        else
        {
            await CreateCampaign(players);
        }
    }

    private async Task CreateCampaign(IEnumerable<int> players)
    {
        var payload = new CampaignCreationDto(_campaignName, players);
        var response = await CampaignApi.CreateAsync(payload);

        response.Match(
            campaignId => NavigationManager.NavigateTo($"campaign/{campaignId}"),
            statusCode =>
            {
                // ToDo: Toast
            });
    }

    private async Task ModifyCampaign(int campaignId, IEnumerable<int> players)
    {
        var payload = new CampaignUpdateDto(_campaignName, players);
        var response = await CampaignApi.ModifyAsync(campaignId, payload);

        if (response.IsSuccess)
        {
            NavigationManager.NavigateTo($"campaign/{campaignId}");
        }
        else
        {
            // ToDo: Toast
        }
    }

}

