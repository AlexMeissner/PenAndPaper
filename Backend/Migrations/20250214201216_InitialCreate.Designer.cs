// <auto-generated />
using Backend.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Backend.Migrations
{
    [DbContext(typeof(PenAndPaperDatabase))]
    [Migration("20250214201216_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Backend.Database.Models.Campaign", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("ActiveMapId")
                        .HasColumnType("integer");

                    b.Property<int>("GameMasterId")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)");

                    b.HasKey("Id");

                    b.HasIndex("ActiveMapId")
                        .IsUnique();

                    b.HasIndex("GameMasterId");

                    b.ToTable("Campaigns");
                });

            modelBuilder.Entity("Backend.Database.Models.Character", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("CampaignId")
                        .HasColumnType("integer");

                    b.Property<byte[]>("Image")
                        .IsRequired()
                        .HasColumnType("bytea");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CampaignId");

                    b.ToTable("Characters");
                });

            modelBuilder.Entity("Backend.Database.Models.Map", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("CampaignId")
                        .HasColumnType("integer");

                    b.Property<int>("GridSize")
                        .HasColumnType("integer");

                    b.Property<byte[]>("Image")
                        .IsRequired()
                        .HasColumnType("bytea");

                    b.Property<bool>("IsGridActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)");

                    b.Property<string>("Script")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CampaignId");

                    b.ToTable("Maps");
                });

            modelBuilder.Entity("Backend.Database.Models.Monster", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("Acrobatics")
                        .HasColumnType("integer");

                    b.Property<string>("Actions")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<string>("Alignment")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<int>("AnimalHandling")
                        .HasColumnType("integer");

                    b.Property<int>("Arcana")
                        .HasColumnType("integer");

                    b.Property<int>("ArmorClass")
                        .HasColumnType("integer");

                    b.Property<int>("Athletics")
                        .HasColumnType("integer");

                    b.Property<double>("ChallengeRating")
                        .HasColumnType("double precision");

                    b.Property<int>("Charisma")
                        .HasColumnType("integer");

                    b.Property<string>("ConditionImmunities")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<int>("Constitution")
                        .HasColumnType("integer");

                    b.Property<string>("DamageImmunities")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<string>("DamageResistances")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<int>("Deception")
                        .HasColumnType("integer");

                    b.Property<int>("Dexterity")
                        .HasColumnType("integer");

                    b.Property<int>("Experience")
                        .HasColumnType("integer");

                    b.Property<int>("History")
                        .HasColumnType("integer");

                    b.Property<string>("HitDice")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<int>("HitPoints")
                        .HasColumnType("integer");

                    b.Property<byte[]>("Image")
                        .IsRequired()
                        .HasColumnType("bytea");

                    b.Property<int>("Insight")
                        .HasColumnType("integer");

                    b.Property<int>("Intelligence")
                        .HasColumnType("integer");

                    b.Property<int>("Intimidation")
                        .HasColumnType("integer");

                    b.Property<int>("Investigation")
                        .HasColumnType("integer");

                    b.Property<string>("Languages")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<int>("Medicine")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<int>("Nature")
                        .HasColumnType("integer");

                    b.Property<int>("Perception")
                        .HasColumnType("integer");

                    b.Property<int>("Performance")
                        .HasColumnType("integer");

                    b.Property<int>("Persuasion")
                        .HasColumnType("integer");

                    b.Property<int>("Religion")
                        .HasColumnType("integer");

                    b.Property<int>("SavingThrowCharisma")
                        .HasColumnType("integer");

                    b.Property<int>("SavingThrowConstitution")
                        .HasColumnType("integer");

                    b.Property<int>("SavingThrowDexterity")
                        .HasColumnType("integer");

                    b.Property<int>("SavingThrowIntelligence")
                        .HasColumnType("integer");

                    b.Property<int>("SavingThrowStrength")
                        .HasColumnType("integer");

                    b.Property<int>("SavingThrowWisdom")
                        .HasColumnType("integer");

                    b.Property<string>("Senses")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<int>("Size")
                        .HasColumnType("integer");

                    b.Property<int>("SlightOfHand")
                        .HasColumnType("integer");

                    b.Property<string>("Speed")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)");

                    b.Property<int>("Stealth")
                        .HasColumnType("integer");

                    b.Property<int>("Strength")
                        .HasColumnType("integer");

                    b.Property<int>("Survival")
                        .HasColumnType("integer");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<int>("Wisdom")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Monsters");
                });

            modelBuilder.Entity("Backend.Database.Models.Token", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(21)
                        .HasColumnType("character varying(21)");

                    b.Property<int>("MapId")
                        .HasColumnType("integer");

                    b.Property<int>("OwnerId")
                        .HasColumnType("integer");

                    b.Property<int>("X")
                        .HasColumnType("integer");

                    b.Property<int>("Y")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("MapId");

                    b.HasIndex("OwnerId");

                    b.ToTable("Tokens");

                    b.HasDiscriminator().HasValue("Token");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Backend.Database.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("CampaignId")
                        .HasColumnType("integer");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.HasKey("Id");

                    b.HasIndex("CampaignId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Backend.Database.Models.CharacterToken", b =>
                {
                    b.HasBaseType("Backend.Database.Models.Token");

                    b.Property<int>("CharacterId")
                        .HasColumnType("integer");

                    b.HasIndex("CharacterId");

                    b.HasDiscriminator().HasValue("CharacterToken");
                });

            modelBuilder.Entity("Backend.Database.Models.MonsterToken", b =>
                {
                    b.HasBaseType("Backend.Database.Models.Token");

                    b.Property<int>("MonsterId")
                        .HasColumnType("integer");

                    b.HasIndex("MonsterId");

                    b.HasDiscriminator().HasValue("MonsterToken");
                });

            modelBuilder.Entity("Backend.Database.Models.Campaign", b =>
                {
                    b.HasOne("Backend.Database.Models.Map", "ActiveMap")
                        .WithOne()
                        .HasForeignKey("Backend.Database.Models.Campaign", "ActiveMapId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Backend.Database.Models.User", "GameMaster")
                        .WithMany()
                        .HasForeignKey("GameMasterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ActiveMap");

                    b.Navigation("GameMaster");
                });

            modelBuilder.Entity("Backend.Database.Models.Character", b =>
                {
                    b.HasOne("Backend.Database.Models.Campaign", null)
                        .WithMany("Characters")
                        .HasForeignKey("CampaignId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Backend.Database.Models.Map", b =>
                {
                    b.HasOne("Backend.Database.Models.Campaign", null)
                        .WithMany("Maps")
                        .HasForeignKey("CampaignId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Backend.Database.Models.Token", b =>
                {
                    b.HasOne("Backend.Database.Models.Map", null)
                        .WithMany("Tokens")
                        .HasForeignKey("MapId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Backend.Database.Models.User", "Owner")
                        .WithMany()
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("Backend.Database.Models.User", b =>
                {
                    b.HasOne("Backend.Database.Models.Campaign", null)
                        .WithMany("Players")
                        .HasForeignKey("CampaignId");
                });

            modelBuilder.Entity("Backend.Database.Models.CharacterToken", b =>
                {
                    b.HasOne("Backend.Database.Models.Character", "Character")
                        .WithMany()
                        .HasForeignKey("CharacterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Character");
                });

            modelBuilder.Entity("Backend.Database.Models.MonsterToken", b =>
                {
                    b.HasOne("Backend.Database.Models.Monster", "Monster")
                        .WithMany()
                        .HasForeignKey("MonsterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Monster");
                });

            modelBuilder.Entity("Backend.Database.Models.Campaign", b =>
                {
                    b.Navigation("Characters");

                    b.Navigation("Maps");

                    b.Navigation("Players");
                });

            modelBuilder.Entity("Backend.Database.Models.Map", b =>
                {
                    b.Navigation("Tokens");
                });
#pragma warning restore 612, 618
        }
    }
}
