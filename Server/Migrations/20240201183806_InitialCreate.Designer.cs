// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Server.Models;

#nullable disable

namespace Server.Migrations
{
    [DbContext(typeof(SQLDatabase))]
    [Migration("20240201183806_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.1");

            modelBuilder.Entity("CampaignUser", b =>
                {
                    b.Property<int>("PlayerCampaignsId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("PlayersId")
                        .HasColumnType("INTEGER");

                    b.HasKey("PlayerCampaignsId", "PlayersId");

                    b.HasIndex("PlayersId");

                    b.ToTable("CampaignUser");
                });

            modelBuilder.Entity("Server.Models.Campaign", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("ActiveAmbientId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("ActiveEffectId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("GamemasterId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Roll")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ActiveAmbientId");

                    b.HasIndex("ActiveEffectId");

                    b.HasIndex("GamemasterId");

                    b.ToTable("Campaigns");
                });

            modelBuilder.Entity("Server.Models.Character", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("CampaignId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Charisma")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Class")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Constitution")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Dexterity")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ExperiencePoints")
                        .HasColumnType("INTEGER");

                    b.Property<byte[]>("Image")
                        .IsRequired()
                        .HasColumnType("BLOB");

                    b.Property<int>("Intelligence")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("Race")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Strength")
                        .HasColumnType("INTEGER");

                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Wisdom")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("CampaignId");

                    b.HasIndex("UserId");

                    b.ToTable("Characters");
                });

            modelBuilder.Entity("Server.Models.Map", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("ActiveCampaignId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("CampaignId")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("GridIsActive")
                        .HasColumnType("INTEGER");

                    b.Property<int>("GridSize")
                        .HasColumnType("INTEGER");

                    b.Property<byte[]>("ImageData")
                        .IsRequired()
                        .HasColumnType("BLOB");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Script")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ActiveCampaignId")
                        .IsUnique();

                    b.HasIndex("CampaignId");

                    b.ToTable("Maps");
                });

            modelBuilder.Entity("Server.Models.Monster", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("Acrobatics")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Actions")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Alignment")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("AnimalHandling")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Arcana")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ArmorClass")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Athletics")
                        .HasColumnType("INTEGER");

                    b.Property<double>("ChallangeRating")
                        .HasColumnType("REAL");

                    b.Property<int>("Charisma")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ConditionImmunities")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("Constitution")
                        .HasColumnType("INTEGER");

                    b.Property<string>("DamageImmunities")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("DamageResistances")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("Deception")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Dexterity")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Experience")
                        .HasColumnType("INTEGER");

                    b.Property<int>("History")
                        .HasColumnType("INTEGER");

                    b.Property<string>("HitDice")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("HitPoints")
                        .HasColumnType("INTEGER");

                    b.Property<byte[]>("Image")
                        .IsRequired()
                        .HasColumnType("BLOB");

                    b.Property<int>("Insight")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Intelligence")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Intimidation")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Investigation")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Languages")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("Medicine")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("Nature")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Perception")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Performance")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Persuasion")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Religion")
                        .HasColumnType("INTEGER");

                    b.Property<int>("SavingThrowCharisma")
                        .HasColumnType("INTEGER");

                    b.Property<int>("SavingThrowConstitution")
                        .HasColumnType("INTEGER");

                    b.Property<int>("SavingThrowDexterity")
                        .HasColumnType("INTEGER");

                    b.Property<int>("SavingThrowIntelligence")
                        .HasColumnType("INTEGER");

                    b.Property<int>("SavingThrowStrength")
                        .HasColumnType("INTEGER");

                    b.Property<int>("SavingThrowWisdom")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Senses")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("Size")
                        .HasColumnType("INTEGER");

                    b.Property<int>("SlightOfHand")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Speed")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("Stealth")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Strength")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Survival")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("Wisdom")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("Monsters");
                });

            modelBuilder.Entity("Server.Models.Note", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsPublic")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Notes");

                    b.UseTptMappingStrategy();
                });

            modelBuilder.Entity("Server.Models.Sound", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<byte[]>("Data")
                        .IsRequired()
                        .HasColumnType("BLOB");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Tags")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("Type")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("Sounds");
                });

            modelBuilder.Entity("Server.Models.Token", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("MapId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("X")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Y")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("MapId");

                    b.ToTable("Tokens");

                    b.UseTptMappingStrategy();
                });

            modelBuilder.Entity("Server.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Server.Models.CharacterNote", b =>
                {
                    b.HasBaseType("Server.Models.Note");

                    b.Property<int>("CharacterId")
                        .HasColumnType("INTEGER");

                    b.HasIndex("CharacterId");

                    b.ToTable("CharacterNotes");
                });

            modelBuilder.Entity("Server.Models.CharacterToken", b =>
                {
                    b.HasBaseType("Server.Models.Token");

                    b.Property<int>("CharacterId")
                        .HasColumnType("INTEGER");

                    b.HasIndex("CharacterId");

                    b.ToTable("CharacterTokens");
                });

            modelBuilder.Entity("Server.Models.MonsterToken", b =>
                {
                    b.HasBaseType("Server.Models.Token");

                    b.Property<int>("MonsterId")
                        .HasColumnType("INTEGER");

                    b.HasIndex("MonsterId");

                    b.ToTable("MonsterTokens");
                });

            modelBuilder.Entity("CampaignUser", b =>
                {
                    b.HasOne("Server.Models.Campaign", null)
                        .WithMany()
                        .HasForeignKey("PlayerCampaignsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Server.Models.User", null)
                        .WithMany()
                        .HasForeignKey("PlayersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Server.Models.Campaign", b =>
                {
                    b.HasOne("Server.Models.Sound", "ActiveAmbient")
                        .WithMany("AmbientInCampaigns")
                        .HasForeignKey("ActiveAmbientId");

                    b.HasOne("Server.Models.Sound", "ActiveEffect")
                        .WithMany("EffectInCampaigns")
                        .HasForeignKey("ActiveEffectId");

                    b.HasOne("Server.Models.User", "Gamemaster")
                        .WithMany("GamemasterCampaigns")
                        .HasForeignKey("GamemasterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ActiveAmbient");

                    b.Navigation("ActiveEffect");

                    b.Navigation("Gamemaster");
                });

            modelBuilder.Entity("Server.Models.Character", b =>
                {
                    b.HasOne("Server.Models.Campaign", "Campaign")
                        .WithMany("Characters")
                        .HasForeignKey("CampaignId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Server.Models.User", "User")
                        .WithMany("Characters")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Campaign");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Server.Models.Map", b =>
                {
                    b.HasOne("Server.Models.Campaign", "ActiveCampaign")
                        .WithOne("ActiveMap")
                        .HasForeignKey("Server.Models.Map", "ActiveCampaignId");

                    b.HasOne("Server.Models.Campaign", "Campaign")
                        .WithMany("Maps")
                        .HasForeignKey("CampaignId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ActiveCampaign");

                    b.Navigation("Campaign");
                });

            modelBuilder.Entity("Server.Models.Note", b =>
                {
                    b.HasOne("Server.Models.User", "User")
                        .WithMany("Notes")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Server.Models.Token", b =>
                {
                    b.HasOne("Server.Models.Map", "Map")
                        .WithMany("Tokens")
                        .HasForeignKey("MapId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Map");
                });

            modelBuilder.Entity("Server.Models.CharacterNote", b =>
                {
                    b.HasOne("Server.Models.Character", "Character")
                        .WithMany("Notes")
                        .HasForeignKey("CharacterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Server.Models.Note", null)
                        .WithOne()
                        .HasForeignKey("Server.Models.CharacterNote", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Character");
                });

            modelBuilder.Entity("Server.Models.CharacterToken", b =>
                {
                    b.HasOne("Server.Models.Character", "Character")
                        .WithMany("Tokens")
                        .HasForeignKey("CharacterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Server.Models.Token", null)
                        .WithOne()
                        .HasForeignKey("Server.Models.CharacterToken", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Character");
                });

            modelBuilder.Entity("Server.Models.MonsterToken", b =>
                {
                    b.HasOne("Server.Models.Token", null)
                        .WithOne()
                        .HasForeignKey("Server.Models.MonsterToken", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Server.Models.Monster", "Monster")
                        .WithMany("Tokens")
                        .HasForeignKey("MonsterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Monster");
                });

            modelBuilder.Entity("Server.Models.Campaign", b =>
                {
                    b.Navigation("ActiveMap");

                    b.Navigation("Characters");

                    b.Navigation("Maps");
                });

            modelBuilder.Entity("Server.Models.Character", b =>
                {
                    b.Navigation("Notes");

                    b.Navigation("Tokens");
                });

            modelBuilder.Entity("Server.Models.Map", b =>
                {
                    b.Navigation("Tokens");
                });

            modelBuilder.Entity("Server.Models.Monster", b =>
                {
                    b.Navigation("Tokens");
                });

            modelBuilder.Entity("Server.Models.Sound", b =>
                {
                    b.Navigation("AmbientInCampaigns");

                    b.Navigation("EffectInCampaigns");
                });

            modelBuilder.Entity("Server.Models.User", b =>
                {
                    b.Navigation("Characters");

                    b.Navigation("GamemasterCampaigns");

                    b.Navigation("Notes");
                });
#pragma warning restore 612, 618
        }
    }
}
